{
    "componentChunkName": "component---src-templates-cheatsheet-js",
    "path": "/cheatsheets/postgresql/",
    "result": {"data":{"site":{"siteMetadata":{"title":"JLPA | BLOG"}},"markdownRemark":{"id":"430518ca-949f-591b-9585-96f8dd296d61","excerpt":"PSQL Magic words: Some interesting flags (to see all, use -h or --help depending on your psql version): -E: will describe the underlaying queries of theâ€¦","html":"<h2>PSQL</h2>\n<p>Magic words:</p>\n<pre><code class=\"language-bash\">psql -U postgres\n</code></pre>\n<p>Some interesting flags (to see all, use <code>-h</code> or <code>--help</code> depending on your psql version):</p>\n<ul>\n<li><code>-E</code>: will describe the underlaying queries of the <code>\\</code> commands (cool for learning!)</li>\n<li><code>-l</code>: psql will list all databases and then exit (useful if the user you connect with doesn't has a default database, like at AWS RDS)</li>\n</ul>\n<p>Most <code>\\d</code> commands support additional param of <code>__schema__.name__</code> and accept wildcards like <code>*.*</code></p>\n<ul>\n<li><code>\\?</code>: Show help (list of available commands with an explanation)</li>\n<li><code>\\q</code>: Quit/Exit</li>\n<li><code>\\c __database__</code>: Connect to a database</li>\n<li><code>\\d __table__</code>: Show table definition (columns, etc.) including triggers</li>\n<li><code>\\d+ __table__</code>: More detailed table definition including description and physical disk size</li>\n<li><code>\\l</code>: List databases</li>\n<li><code>\\dy</code>: List events</li>\n<li><code>\\df</code>: List functions</li>\n<li><code>\\di</code>: List indexes</li>\n<li><code>\\dn</code>: List schemas</li>\n<li><code>\\dt *.*</code>: List tables from all schemas (if <code>*.*</code> is omitted will only show SEARCH_PATH ones)</li>\n<li><code>\\dT+</code>: List all data types</li>\n<li><code>\\dv</code>: List views</li>\n<li><code>\\dx</code>: List all extensions installed</li>\n<li><code>\\df+ __function__</code> : Show function SQL code.</li>\n<li><code>\\x</code>: Pretty-format query results instead of the not-so-useful ASCII tables</li>\n<li><code>\\copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV</code>: Export a table as CSV</li>\n<li><code>\\des+</code>: List all foreign servers</li>\n<li><code>\\dE[S+]</code>: List all foreign tables</li>\n<li><code>\\! __bash_command__</code>: execute <code>__bash_command__</code> (e.g. <code>\\! ls</code>)</li>\n</ul>\n<p>User Related:</p>\n<ul>\n<li><code>\\du</code>: List users</li>\n<li><code>\\du __username__</code>: List a username if present.</li>\n<li><code>create role __test1__</code>: Create a role with an existing username.</li>\n<li><code>create role __test2__ noinherit login password __passsword__;</code>: Create a role with username and password.</li>\n<li><code>set role __test__;</code>: Change role for current session to <code>__test__</code>.</li>\n<li><code>grant __test2__ to __test1__;</code>: Allow <code>__test1__</code> to set its role as <code>__test2__</code>.</li>\n<li><code>\\deu+</code>: List all user mapping on server</li>\n</ul>\n<h2>Configuration</h2>\n<ul>\n<li>Service management commands:</li>\n</ul>\n<pre><code>sudo service postgresql stop\nsudo service postgresql start\nsudo service postgresql restart\n</code></pre>\n<ul>\n<li>Changing verbosity &#x26; querying Postgres log:\n<br/>1) First edit the config file, set a decent verbosity, save and restart postgres:</li>\n</ul>\n<pre><code>sudo vim /etc/postgresql/9.3/main/postgresql.conf\n\n# Uncomment/Change inside:\nlog_min_messages = debug5\nlog_min_error_statement = debug5\nlog_min_duration_statement = -1\n\nsudo service postgresql restart\n</code></pre>\n<ol start=\"2\">\n<li>Now you will get tons of details of every statement, error, and even background tasks like VACUUMs</li>\n</ol>\n<pre><code>tail -f /var/log/postgresql/postgresql-9.3-main.log\n</code></pre>\n<ol start=\"3\">\n<li>How to add user who executed a PG statement to log (editing <code>postgresql.conf</code>):</li>\n</ol>\n<pre><code>log_line_prefix = '%t %u %d %a '\n</code></pre>\n<ul>\n<li>\n<p>Check Extensions enabled in postgres: <code>SELECT * FROM pg_extension;</code></p>\n</li>\n<li>\n<p>Show available extensions: <code>SELECT * FROM pg_available_extension_versions;</code></p>\n</li>\n</ul>\n<h2>Create command</h2>\n<p>There are many <code>CREATE</code> choices, like <code>CREATE DATABASE __database_name__</code>, <code>CREATE TABLE __table_name__</code> ... Parameters differ but can be checked <a href=\"https://www.postgresql.org/search/?u=%2Fdocs%2F9.1%2F&#x26;q=CREATE\">at the official documentation</a>.</p>\n<h2>Handy queries</h2>\n<ul>\n<li><code>SELECT * FROM pg_proc WHERE proname='__procedurename__'</code>: List procedure/function</li>\n<li><code>SELECT * FROM pg_views WHERE viewname='__viewname__';</code>: List view (including the definition)</li>\n<li><code>SELECT pg_size_pretty(pg_total_relation_size('__table_name__'));</code>: Show DB table space in use</li>\n<li><code>SELECT pg_size_pretty(pg_database_size('__database_name__'));</code>: Show DB space in use</li>\n<li><code>show statement_timeout;</code>: Show current user's statement timeout</li>\n<li><code>SELECT * FROM pg_indexes WHERE tablename='__table_name__' AND schemaname='__schema_name__';</code>: Show table indexes</li>\n<li>Get all indexes from all tables of a schema:</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT\n   t.relname AS table_name,\n   i.relname AS index_name,\n   a.attname AS column_name\nFROM\n   pg_class t,\n   pg_class i,\n   pg_index ix,\n   pg_attribute a,\n    pg_namespace n\nWHERE\n   t.oid = ix.indrelid\n   AND i.oid = ix.indexrelid\n   AND a.attrelid = t.oid\n   AND a.attnum = ANY(ix.indkey)\n   AND t.relnamespace = n.oid\n    AND n.nspname = 'kartones'\nORDER BY\n   t.relname,\n   i.relname\n</code></pre>\n<ul>\n<li>Execution data:\n<ul>\n<li>Queries being executed at a certain DB:</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT datname, application_name, pid, backend_start, query_start, state_change, state, query \n  FROM pg_stat_activity \n  WHERE datname='__database_name__';\n</code></pre>\n<ul>\n<li>Get all queries from all dbs waiting for data (might be hung):</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT * FROM pg_stat_activity WHERE waiting='t'\n</code></pre>\n<ul>\n<li>Currently running queries with process pid:</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT \n  pg_stat_get_backend_pid(s.backendid) AS procpid, \n  pg_stat_get_backend_activity(s.backendid) AS current_query\nFROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;\n</code></pre>\n<ul>\n<li>Get Connections by Database: <code>SELECT datname, numbackends FROM pg_stat_database;</code></li>\n</ul>\n<p>Casting:</p>\n<ul>\n<li><code>CAST (column AS type)</code> or <code>column::type</code></li>\n<li><code>'__table_name__'::regclass::oid</code>: Get oid having a table name</li>\n</ul>\n<p>Query analysis:</p>\n<ul>\n<li><code>EXPLAIN __query__</code>: see the query plan for the given query</li>\n<li><code>EXPLAIN ANALYZE __query__</code>: see and execute the query plan for the given query</li>\n<li><code>ANALYZE [__table__]</code>: collect statistics</li>\n</ul>\n<p>Generating random data (<a href=\"https://www.citusdata.com/blog/2019/07/17/postgres-tips-for-average-and-power-user/\">source</a>):</p>\n<ul>\n<li><code>INSERT INTO some_table (a_float_value) SELECT random() * 100000 FROM generate_series(1, 1000000) i;</code></li>\n</ul>\n<p>Get sizes of tables, indexes and full DBs:</p>\n<pre><code class=\"language-sql\">select current_database() as database,\n  pg_size_pretty(total_database_size) as total_database_size,\n  schema_name,\n  table_name,\n  pg_size_pretty(total_table_size) as total_table_size,\n  pg_size_pretty(table_size) as table_size,\n  pg_size_pretty(index_size) as index_size\n  from ( select table_name,\n          table_schema as schema_name,\n          pg_database_size(current_database()) as total_database_size,\n          pg_total_relation_size(table_name) as total_table_size,\n          pg_relation_size(table_name) as table_size,\n          pg_indexes_size(table_name) as index_size\n          from information_schema.tables\n          where table_schema=current_schema() and table_name like 'table_%'\n          order by total_table_size\n      ) as sizes;\n</code></pre>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/9.2/sql-copy.html\">COPY command</a>: Import/export from CSV to tables:</li>\n</ul>\n<pre><code class=\"language-sql\">COPY table_name [ ( column_name [, ...] ) ]\nFROM { 'filename' | STDIN }\n[ [ WITH ] ( option [, ...] ) ]\n\nCOPY { table_name [ ( column_name [, ...] ) ] | ( query ) }\nTO { 'filename' | STDOUT }\n[ [ WITH ] ( option [, ...] ) ]\n</code></pre>\n<ul>\n<li>List all grants for a specific user</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT table_catalog, table_schema, table_name, privilege_type\nFROM   information_schema.table_privileges\nWHERE  grantee = 'user_to_check' ORDER BY table_name;\n</code></pre>\n<ul>\n<li>List all assigned user roles</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT\n    r.rolname,\n    r.rolsuper,\n    r.rolinherit,\n    r.rolcreaterole,\n    r.rolcreatedb,\n    r.rolcanlogin,\n    r.rolconnlimit,\n    r.rolvaliduntil,\n    ARRAY(SELECT b.rolname\n      FROM pg_catalog.pg_auth_members m\n      JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\n      WHERE m.member = r.oid) as memberof, \n    r.rolreplication\nFROM pg_catalog.pg_roles r\nORDER BY 1;\n</code></pre>\n<ul>\n<li>Check permissions in a table:</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT grantee, privilege_type\nFROM information_schema.role_table_grants\nWHERE table_name='name-of-the-table';\n</code></pre>\n<ul>\n<li>Kill all Connections:</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT pg_terminate_backend(pg_stat_activity.pid)\nFROM pg_stat_activity\nWHERE datname = current_database() AND pid &#x3C;> pg_backend_pid();\n</code></pre>\n<h2>Keyboard shortcuts</h2>\n<ul>\n<li><code>CTRL</code> + <code>R</code>: reverse-i-search</li>\n</ul>\n<h2>Tools</h2>\n<ul>\n<li><code>ptop</code> and <code>pg_top</code>: <code>top</code> for PG. Available on the APT repository from <code>apt.postgresql.org</code>.</li>\n<li><a href=\"https://github.com/julmon/pg_activity\">pg_activity</a>: Command line tool for PostgreSQL server activity monitoring.</li>\n<li><a href=\"https://dba.stackexchange.com/questions/63453/is-there-a-psql-equivalent-of-bashs-reverse-search-history\">Unix-like reverse search in psql</a>:</li>\n</ul>\n<pre><code class=\"language-bash\">$ echo \"bind \"^R\" em-inc-search-prev\" > $HOME/.editrc\n$ source $HOME/.editrc\n</code></pre>\n<ul>\n<li>Show IP of the DB Instance: <code>SELECT inet_server_addr();</code></li>\n<li>File to save PostgreSQL credentials and permissions (format: <code>hostname:port:database:username:password</code>): <code>chmod 600 ~/.pgpass</code></li>\n<li>Collect statistics of a database (useful to improve speed after a Database Upgrade as previous query plans are deleted): <code>ANALYZE VERBOSE;</code></li>\n<li>To obtain the <code>CREATE TABLE</code> query of a table, any visual GUI like <a href=\"https://www.pgadmin.org/\">pgAdmin</a> allows to easily, but else you can use <code>pg_dump</code>, e.g.: <code>pg_dump -t '&#x3C;schema>.&#x3C;table>' --schema-only &#x3C;database></code> (<a href=\"https://stackoverflow.com/questions/2593803/how-to-generate-the-create-table-sql-statement-for-an-existing-table-in-postgr\">source</a>)</li>\n</ul>\n<h2>Resources &#x26; Documentation</h2>\n<ul>\n<li><a href=\"https://postgresweekly.com/\">Postgres Weekly</a> newsletter: The best way IMHO to keep up to date with PG news</li>\n<li><a href=\"https://mydbanotebook.org/psql_tips_all.html\">100 psql Tips</a>: Name says all, lots of useful tips!</li>\n<li><a href=\"https://pgexercises.com/\">PostgreSQL Exercises</a>: An awesome resource to learn to learn SQL, teaching you with simple examples in a great visual way. <strong>Highly recommended</strong>.</li>\n<li><a href=\"https://severalnines.com/blog/performance-cheat-sheet-postgresql\">A Performance Cheat Sheet for PostgreSQL</a>: Great explanations of <code>EXPLAIN</code>, <code>EXPLAIN ANALYZE</code>, <code>VACUUM</code>, configuration parameters and more. Quite interesting if you need to tune-up a postgres setup.</li>\n<li><a href=\"https://github.com/jberkus/annotated.conf\">annotated.conf</a>: Annotations of all 269 postgresql.conf settings for PostgreSQL 10.</li>\n<li><code>psql -c \"\\l+\" -H -q postgres > out.html</code>: Generate a html report of your databases (source: <a href=\"https://twitter.com/westermanndanie/status/1242117182982586372\">Daniel Westermann</a>)</li>\n</ul>","frontmatter":{"title":"PostgreSQL","date":null,"frontimage":null,"description":null},"fields":{"slug":"/postgresql/"}},"previous":{"fields":{"slug":"/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"next":{"fields":{"slug":"/qemu/"},"frontmatter":{"title":"QEMU"}}},"pageContext":{"id":"430518ca-949f-591b-9585-96f8dd296d61","previousPostId":"dcc7e9fe-c43d-5d2e-90e4-a2b75fddf2f6","nextPostId":"eb00296a-e0a3-53e1-a7e1-2be5ac74dcca"}},
    "staticQueryHashes": ["2841359383","3865664119"]}