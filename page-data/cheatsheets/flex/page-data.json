{
    "componentChunkName": "component---src-templates-cheatsheet-js",
    "path": "/cheatsheets/flex/",
    "result": {"data":{"site":{"siteMetadata":{"title":"JLPA | BLOG"}},"markdownRemark":{"id":"2e5337fe-dc1e-5e86-9dcf-20fbd1769ebd","excerpt":"Flexbox Visual in-class guide CSS Tricks Flexbox reference Flexbox Froggy Flexbox changes a container's child elements into inline, flexible elements Flexbox isâ€¦","html":"<h1>Flexbox</h1>\n<p><a href=\"https://medium.freecodecamp.com/an-animated-guide-to-flexbox-d280cf6afc35#.2z1jupppf\">Visual in-class guide</a></p>\n<p><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Tricks Flexbox reference</a></p>\n<p><a href=\"http://flexboxfroggy.com/\">Flexbox Froggy</a></p>\n<p>Flexbox changes a container's child elements into inline, flexible elements</p>\n<p>Flexbox is a single-direction layout concept -- direction can be either column or row</p>\n<h2>Important defaults</h2>\n<p>Direction -- Default setting is <code>row</code>, which is horizontal</p>\n<p>Main Axis -- Follows direction. Because direction is <code>row</code> by default, the Main Axis is also horizontal</p>\n<p>Cross Axis -- Perpendicular to Main Axis, so default is vertical</p>\n<h2>Common Flex properties</h2>\n<p>Keep in mind -- you don't have to state every property!</p>\n<h3>Flex Container ( outer div -- parent element )</h3>\n<table>\n<thead>\n<tr>\n<th>CSS Property</th>\n<th>Values</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>display</code></td>\n<td><code>flex</code></td>\n<td>Turns the element into a Flex Container (<strong>required</strong>)</td>\n<td><code>block</code></td>\n</tr>\n<tr>\n<td><code>flex-direction</code></td>\n<td><code>row</code> <br> <code>column</code></td>\n<td>Establishes the <strong>Main Axis</strong></td>\n<td><code>row</code></td>\n</tr>\n<tr>\n<td><code>justify-content</code></td>\n<td><code>flex-start</code> <br> <code>flex-end</code> <br> <code>center</code> <br> <code>space-around</code> <br> <code>space-between</code></td>\n<td>Arrangement of Flex Items along the <strong>Main Axis</strong>.<br> Defined by <code>flex-direction</code></td>\n<td><code>flex-start</code></td>\n</tr>\n<tr>\n<td><code>align-items</code></td>\n<td><code>flex-start</code> <br> <code>flex-end</code> <br> <code>center</code> <br> <code>stretch</code> <br> <code>baseline</code></td>\n<td>Arrangement of Flex Items along the <strong>Cross Axis</strong>.<br> Defined by <code>flex-direction</code></td>\n<td><code>flex-start</code></td>\n</tr>\n<tr>\n<td><code>flex-wrap</code></td>\n<td><code>wrap</code> <br> <code>nowrap</code></td>\n<td>How Flex Items behave when they can't fit on one line (due to browser size)<br> Defined by <code>flex-direction</code></td>\n<td><code>nowrap</code></td>\n</tr>\n<tr>\n<td><code>flex-flow</code></td>\n<td><code>row nowrap</code> <br> <code>row wrap</code> <br> <code>column nowrap</code> <br> <code>column wrap</code> <br> <code>row reverse</code> <br> <code>column reverse</code></td>\n<td>Shorthand for <code>flex-direction</code> + <code>flex-wrap</code></td>\n<td><code>row nowrap</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note</strong>: When using <code>stretch</code>, <code>height</code> needs to be accounted fors</p>\n<!-- Change this part -->\n<p><strong>Important</strong> -- Changing <code>flex-direction</code> to <code>column</code> does <strong>NOT</strong> arrange the Flex Items along the container's Cross Axis. It converts the Flex Container's Main Axis from horizontal to vertical. Which means the Cross Axis becomes horizontal</p>\n<ul>\n<li><code>justify-content</code> still refers to Main Axis (which is now vertical)</li>\n<li><code>align-items</code> still refers to Cross Axis (which is now horizontal)</li>\n</ul>\n<h3>Flex Items ( inner divs -- child elements )</h3>\n<table>\n<thead>\n<tr>\n<th>CSS</th>\n<th>Values</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>align-self</code></td>\n<td>see values for <code>align-items</code></td>\n<td>Override container <code>align-items</code> property</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>order</code></td>\n<td>[number]</td>\n<td>Control the order of appearance</td>\n<td>Source order</td>\n</tr>\n<tr>\n<td>(more later)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- `flex` | `none`<br> `[number] [number] [length]`  | Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`<br> Second and third parameters are optional | `0 1 auto`\n`flex-grow` | [number] | Enables an item to grow if necessary<br> Values specify proportionate space | 0\n`flex-shrink` | [number] | Enables an item to shrink if necessary | -\n`flex-basis` | [length] | -- | -- -->\n<h2>Important things to keep in mind</h2>\n<ul>\n<li>\n<p>Most of Flexbox work is done on the Flex <strong>Container</strong></p>\n</li>\n<li>\n<p>A Flex Item can be a Flex Container to its own Flex Items (nested children)</p>\n</li>\n<li>\n<p><code>float</code>, <code>clear</code>, and <code>vertical-align</code> have no effect on Flex Items</p>\n</li>\n</ul>","frontmatter":{"title":"CSS Flexbox","date":null,"frontimage":null,"description":null},"fields":{"slug":"/flex/"}},"previous":{"fields":{"slug":"/docker/"},"frontmatter":{"title":"Docker"}},"next":{"fields":{"slug":"/grid/"},"frontmatter":{"title":"CSS Grid"}}},"pageContext":{"id":"2e5337fe-dc1e-5e86-9dcf-20fbd1769ebd","previousPostId":"403e8dfb-df4a-5842-93b4-79960c105a00","nextPostId":"9f238983-6266-597c-86a8-b23cc2fbc781"}},
    "staticQueryHashes": ["2841359383","3865664119"]}