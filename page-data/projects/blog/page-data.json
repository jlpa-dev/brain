{
    "componentChunkName": "component---src-templates-project-js",
    "path": "/projects/blog/",
    "result": {"data":{"site":{"siteMetadata":{"title":"JLPA | BLOG"}},"markdownRemark":{"id":"84fe73b6-82b1-5965-949c-b6b38e35841a","excerpt":"HIce varios experimentos creando mi blog personal probando los siguientes stack Wordpress Ghost CMS Gatsby + Strapi CMS + Cloudinary + Heroku + PostgreSQL Sin‚Ä¶","html":"<p>HIce varios experimentos creando mi blog personal probando los siguientes stack</p>\n<ul>\n<li>Wordpress</li>\n<li>Ghost CMS</li>\n<li>Gatsby + Strapi CMS + Cloudinary + Heroku + PostgreSQL</li>\n</ul>\n<p>Sin duda el stack mas complicado fue el √∫ltimo pero tambi√©n el mas completo, fue all√≠ donde nacio el dise√±o y la distrubic√≥n de los datos de la versi√≥n final. El Stack me daba un CMS muy completo y versatil, pero despues de varios meses de mantenerlo, me di cuenta que consum√≠a mas tiempo actualizando cada tecnolog√≠a, migrando bibliotecas y manteniendome al d√≠a con la versi√≥n estable de cada una tecnolog√≠a en mi stack.</p>\n<p>Por ello tom√© la decisi√≥n de mantenerlo simple (KISS), y elimin√© todo a excepci√≥n de Gatsby para la generaci√≥n del sitio web estatico y cambio los plugin para la conexi√≥n con strapi por un plugin para la generaci√≥n del contenido a partir de archivos markdown (gatsby-transformer-remark). De esta manera dedico mas tiempo a escribir contenido y la tecnolog√≠a utilizada es mas que suficinte para cumplir con el objetivo.</p>\n<h3>Tech stack</h3>\n<ul>\n<li>Gatsby</li>\n<li>Github pages</li>\n<li>Docker y Docker Compose (Para desarrollo)</li>\n</ul>\n<h3>Docker image</h3>\n<p>La creaci√≥n de im√°gen docker es solo desarrollo, ya que el despliegue se realiza utilizando github actions y github pages.</p>\n<pre><code class=\"language-docker\">FROM node:14.18.3-stretch\nWORKDIR /srv/app\nCOPY ./package*.json ./\nRUN npm install\nEXPOSE 8000\nCMD [ \"npm\", \"run\", \"develop\"]\n</code></pre>\n<p>Para facilitar a√∫n m√°s la ejecuci√≥n utilizo docker-compose.</p>\n<pre><code class=\"language-docker\">version: '3'\nservices:\n\tjlpa-blog:\n\t\tcontainer_name: jlpa-blog\n\t\tbuild: .\n\t\tcommand: \"npm run develop\"\n\t\tenvironment:\n\t\t- NODE_ENV=development\t\t\n\t\t- GATSBY_TELEMETRY_DISABLED=1\n\t\t- INTERNAL_STATUS_PORT=42899\n\t\tports:\n\t\t- 8000:8000\n\t\t- 42899:42899\n\t\tvolumes:\n\t\t- .:/srv/app\n\t\t- /srv/app/node_modules\n</code></pre>\n<h3>GithubPages</h3>\n<p>Mi blog personal al ser de contenido est√°tico puede aprovechar la funcionalidad provista por Github a trav√©s del servicio de Github Pages, esto me permite alojar y servir el contenido generado por Gatsby en un subdominio de Github, tambi√©n tenemos la opci√≥n de vicularlo a un dominio propio.</p>\n<h3>Github Actions</h3>\n<p>No todo el contenido del blog es p√∫blico, hay contenido que prefiero mantener en privado por un determinado tiempo, asi que el c√≥digo fuente est√° alojado en un repositorio privado, y mendiante una acci√≥n de Github publico el contenido generado por Gatsby a un repositroio p√∫blico que ademas es un requisito para poder utilizar Github Pages.</p>\n<pre><code>name: Build and Deploy\n\non: [push]\n\njobs:\n\n\tbuild-and-deploy:\n\n\truns-on: ubuntu-latest\n\n\tsteps:\n\n\t- name: Checkout üõéÔ∏è\n\t  uses: actions/checkout@v2.3.1\n\n\t- name: Install and Build üîß \n      run: |\n\t    npm ci\n\t    PREFIX_PATHS=true npm run build\n\t- name: Deploy üöÄ\n\t  uses: JamesIves/github-pages-deploy-action@4.1.7\n\t  with:\n\t\trepository-name: jlpa-dev/brain\n\t\tbranch: master # The branch the action should deploy to.\n\t\tfolder: public # The folder the action should deploy.\n\t\ttoken: ${{ secrets.GH_PAT }}\n</code></pre>\n<p>La acci√≥n ejecuta los comandos necesarios para la contstrucci√≥n del sitio estatico, cuyo resultado se alamcena en una carpeta llamada \"public\", posteriomente se realiza una acci√≥n push del cotenido de esta carpeta al repositrio que tiene habilitado Githbub Pages.</p>\n<blockquote>\n<p>Nota:\nEl comando npm ci es similar a npm install, la diferencia reside en que npm ci, no crea ni almacena las dependencias en la carpeta llamada node_modules.</p>\n</blockquote>","frontmatter":{"title":"Construcci√≥n Blog","start_date":"January 01, 2021","frontimage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/35f42/frontimage.png","srcSet":"/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/c79a3/frontimage.png 240w,\n/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/f7e0e/frontimage.png 480w,\n/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/35f42/frontimage.png 960w","sizes":"(min-width: 960px) 960px, 100vw"},"sources":[{"srcSet":"/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/8aa0c/frontimage.webp 240w,\n/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/5ad5f/frontimage.webp 480w,\n/brain/static/fcaf8a6dc5a81bf58988363183e6e7d1/b9ace/frontimage.webp 960w","type":"image/webp","sizes":"(min-width: 960px) 960px, 100vw"}]},"width":960,"height":400}}},"description":null},"fields":{"slug":"/blog/"}},"previous":null,"next":{"fields":{"slug":"/osce-bot/"},"frontmatter":{"title":"OSCE Bot"}}},"pageContext":{"id":"84fe73b6-82b1-5965-949c-b6b38e35841a","previousPostId":null,"nextPostId":"0de17699-a166-5ae8-8464-5a2805ae64bf"}},
    "staticQueryHashes": ["2841359383","3865664119"]}